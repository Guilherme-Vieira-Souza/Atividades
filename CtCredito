import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class CartaoDeCredito {
    private double limite;
    private double fatura;
    private double cashbackAcumulado;
    private List<Transacao> historicoDeTransacoes; 

    
    public CartaoDeCredito(double limite) {
        this.limite = limite;
        this.fatura = 0;
        this.cashbackAcumulado = 0.0;
        this.historicoDeTransacoes = new ArrayList<>();
    }

    
    public double consultarLimite() {
        return limite - fatura;
    }

  
    public void realizarCompra(double valor, String descricao) {
        if (valor <= consultarLimite()) {
            fatura += valor;
            double cashback = valor * 0.05;
            cashbackAcumulado += cashback;

            
            Transacao transacao = new Transacao(new Date(), (float) valor, descricao);
            historicoDeTransacoes.add(transacao);

            System.out.println("Compra de R$" + valor + " realizada com sucesso! Cashback acumulado: R$" + cashback);
        } else {
            System.err.println("Compra não autorizada! Limite insuficiente.");
        }
    }

   
    public void aplicarCashbackNaFatura() {
        if (cashbackAcumulado > 0) {
            fatura -= cashbackAcumulado;
            if (fatura < 0) {
                fatura = 0;
            }
            System.out.println("Cashback de R$" + cashbackAcumulado + " aplicado na fatura.");
            cashbackAcumulado = 0;
        } else {
            System.out.println("Não há cashback disponível para aplicar.");
        }
    }

   
    public void exibirHistorico() {
        if (historicoDeTransacoes.isEmpty()) {
            System.out.println("Não há transações registradas.");
        } else {
            System.out.println("\nHistórico de Transações:");
            for (Transacao transacao : historicoDeTransacoes) {
                System.out.println(transacao);
            }
        }
    }

    public double getLimite() {
        return limite;
    }

    public void setLimite(double limite) {
        this.limite = limite;
    }

    public double getFatura() {
        return fatura;
    }

    public void setFatura(double fatura) {
        this.fatura = fatura;
    }

    public double getCashbackAcumulado() {
        return cashbackAcumulado;
    }

    public void setCashbackAcumulado(double cashbackAcumulado) {
        this.cashbackAcumulado = cashbackAcumulado;
    }
}
